from typing import Optional
from config import Config
from const import LIST_TYPES, SCAN_CONFIGURATIONS


class AntiMalwareConfigurations:
    """AntiMalwareConfigurations - creates and maintains anti malware configurations."""

    def __init__(self, connector, configuration: Optional[Config] = None):

        if configuration is None:
            configuration = Config.global_instance()
        self.config = configuration
        self._connector = connector
        self.configurations = {}
        self.get_configurations()

    def get_configurations(self):
        """Creates a nested dictionary of existing file, file extension and directory lists.

        Example:
            {'Advanced Real-Time Scan Configuration': 4,
             'Default Manual Scan Configuration': 2,
             'Default Real-Time Scan Configuration': 1,
             'Default Scheduled Scan Configuration': 3,
             'Template Real-Time Scan Configuration': 67,
             'Template Scheduled Scan Configuration': 133}

        """
        
        result = self._connector.get("antimalwareconfigurations", "")
        result_type = list(result.keys())[0]
        for configuration_id_name in result[result_type]:
            self.configurations[configuration_id_name.get("name")] = configuration_id_name.get("ID")

    def query_configuration(self, key):
        """Queries for the id of a configuration name.

        Example:
            {'Advanced Real-Time Scan Configuration': 4,
             'Default Manual Scan Configuration': 2,
             'Default Real-Time Scan Configuration': 1,
             'Default Scheduled Scan Configuration': 3,
             'Template Real-Time Scan Configuration': 67,
             ***'Template Scheduled Scan Configuration': 133}***

        Args:
            dict_obj (dict): Configurations
            key (str): Name of the configuration

        Returns:
            ID or None

        """
        if key in self.configurations.keys():
            return self.configurations[key]
