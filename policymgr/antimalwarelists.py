from typing import Optional
from config import Config
from const import LIST_TYPES


class AntiMalwareLists:
    """AntiMalwareLists - creates and maintains inclusion and exclusion lists."""

    def __init__(self, connector, configuration: Optional[Config] = None):

        if configuration is None:
            configuration = Config.global_instance()
        self.config = configuration
        self._connector = connector
        self.lists = {}
        self.get_lists()

    def get_lists(self):
        """Creates a nested dictionary of existing file, file extension and directory lists.

        Example:
            {'file_extension_lists': {'Scan File Extension List (Windows)': 1},
            'file_lists': [{'Process Image Files (Windows)': 1},
                            {'windows_server_2016_domain_controller': 72},
                            {'windows_server_2019_domain_controller': 73},
                            {'windows_server_2019_member_server': 74}]}

        """

        for list_type in LIST_TYPES:
            result = self._connector.get(list_type.replace("_", ""), "")
            result_type = list(result.keys())[0]
            for list_id_name in result[result_type]:
                self._append_value(
                    list_type,
                    {list_id_name.get("name"): list_id_name.get("ID")},
                )

    def _append_value(self, list_type, value):
        """Appends a value {'list_name': ID} to the dictionary within the given list type.

        Example:
            {'file_extension_lists': {'Scan File Extension List (Windows)': 1},
            'file_lists': [{'Process Image Files (Windows)': 1},
                            {'windows_server_2016_domain_controller': 72},
                            {'windows_server_2019_domain_controller': 73},
                            ***{'windows_server_2019_member_server': 74}]}***

        Args:
            self.lists (dict): Lists
            list_type (str): Type of list
            value (dict): Dictionary of name and id

        """

        # Check if list_type exist in dict or not
        if list_type in self.lists:
            # Check if list exists in list_type
            if list(value.keys())[0] in self.lists[list_type].keys():
                # Key exist in dict.
                # Check if type of value of key is dict or not
                if not isinstance(self.lists[list_type], dict):
                    # If type is not dict then make it dict
                    self.lists[list_type] = {value}
                # Append the value in list_type
                self.lists[list_type] = value
            else:
                # As key is not in dict, so, add key-value pair
                temp = {**self.lists[list_type], **value}
                self.lists[list_type] = temp
        else:
            self.lists[list_type] = value

    def query_list(self, list_type, key):
        """Queries for the id of a list name of the given list type.

        Example:
            {'file_extension_lists': {'Scan File Extension List (Windows)': 1},
            'file_lists': [{'Process Image Files (Windows)': 1},
                            {'windows_server_2016_domain_controller': 72},
                            {'windows_server_2019_domain_controller': 73},
                            ***{'windows_server_2019_member_server': 74}]}***

        Args:
            dict_obj (dict): Lists
            list_type (str): Type of list
            key (str): Name of the list

        Returns:
            ID or None

        """
        if list_type in self.lists:
            if key in self.lists[list_type].keys():
                return self.lists[list_type][key]

    def concat_lists(self, category, type, lists):
        """Concatenates two lists

        Args:
            category (str): Either exclusion_lists or inclusion_lists
            type (str): As defined in LIST_TYPES
            lists (list): Additional elemets

        Returns:
            Concatenated list

        """

        list_concat = []
        for item in lists:
            list_concat += self.config.data[category][type][item]

        return list_concat
